public class SearchLogs {
    private static String bearer;
    
    public static SearchLogDAOService searchLogDAOService {
        get {
            if(searchLogDAOService == null) {
                searchLogDAOService = new SearchLogDAOServiceImpl();
            }
            return searchLogDAOService;
        }
        set {
            searchLogDAOService = value;
        }
    }
    
    public static HttpCalloutService calloutService {
        get {
            if (calloutService == null) {
                calloutService = new HttpCalloutServiceImpl();
            }
            return calloutService;
        }
        set {
            calloutService = value;
        }
    }
    
    @AuraEnabled
    public static void advancedSearchLogs(String searchStr) {
        BatchGetLogs bgl = new BatchGetLogs(searchStr);
        Id batchId = Database.executeBatch(bgl, 10);
    }
    
    @AuraEnabled
    public static String searchLogs(String searchStr) {
        // 1. Create connected app
        // 2. Remote site setting for endpoint registration
        Api_User__c registeredApiUser = getApiUser(UserInfo.getUserName());
        if(registeredApiUser == null) return null;
        bearer = calloutService.getAccessToken(registeredApiUser);
        List<String> allLogStrings = new List<String>();
        List<ApexLog> allLogs = searchLogDAOService.getLogs();
        for (ApexLog al : allLogs) {
            String someData = calloutService.getLogData(al.Id, bearer);
            if(someData.containsIgnoreCase(searchStr) && !someData.contains('selfsearch')) {
            	allLogStrings.add(someData);   
            }
        }
        // This will prevent searching for logs generated by the search
        System.debug('selfsearch');
        return String.join(allLogStrings, '\n');
    }
    
    @AuraEnabled
    public static void apiUserRegister(Api_User__c apiUser) {
        if(calloutService.getAccessToken(apiUser) != null) {
            upsert apiUser;
        } else {
            throw new AuraHandledException('API User cannot be registered! Make sure user details and credentials are entered correctly.');
        }
    }
    
    @AuraEnabled
    public static Boolean hasApiUser() {
        return getApiUser(UserInfo.getUserName()) != null;
    }
    
    @AuraEnabled
    public static String getUserName() {
        return UserInfo.getUserName();
    }
    
    @AuraEnabled
    public static Api_User__c getApiUser(String userName) {
        Api_User__c apiUser;
        try {
        	apiUser = [SELECT Id, Username__c, Password__c, Client_ID__c, Client_Secret__c
                       FROM Api_User__c 
                       WHERE Username__c = :userName LIMIT 1];
            return apiUser;
        } catch(Exception ex) {
            throw new ApplicationException('No Api User found with username: '+userName);
        }
    }
    
    private class ApplicationException extends Exception {}
}