public class SearchLogs {
    private static String currentOrgSite = 'https://australiacom-dev-ed.my.salesforce.com';
    private static String apiString = '/services/data/v52.0/sobjects/ApexLog/';
    private static String bearer;
    private static String srchStr;
    
    @AuraEnabled
    public static String searchLogs(String searchStr) {
        srchStr = searchStr;
        // 1. Create connected app
        // 2. Remote site setting for endpoint registration
        getAccessToken();
        String allLogString = '';
        List<ApexLog> allLogs = getLogs();
        for (ApexLog al : allLogs) {
            String someData = getLogData(al.Id);
            if(String.isNotBlank(someData) && !someData.contains('selfsearch')) {
            	allLogString += someData;    
            }
        }
        // This will prevent searching for logs generated by the search
        System.debug('selfsearch');
        return allLogString;
    }
    
    @AuraEnabled
    public static void apiUserRegister(Api_User__c apiUser) {
        System.debug('API User: '+apiUser);
        insert apiUser;
    }
    
    private static void getAccessToken() {
        // 1. Create connected app
        // 2. Remote site setting for endpoint registration
        Api_User__c apiUser = [SELECT Id, Current_Org_Site__c, Username__c, Password__c, Client_ID__c, Client_Secret__c
                              FROM Api_User__c
                              WHERE Username__c = :UserInfo.getUserName()];
        
        
      /*  String username = 'dalewang@australia.com';
        String password = 'Digital2!gtg9GraDOYfxh8NWgQopiUoq';
        String grantType = 'password';
        String clientId = '3MVG9fe4g9fhX0E6c6x1mh38Y0cCjHMAOVouYb30AgFT0jaXBSpHhfxzedxCJ3Y.NzrY4rDmKz1K2eVdAp4WE';
        String clientSecret = 'C913B844D2C744D8D4FFE666D873FFB902847CC7CF69A09E653E55CAED0572E0'; */
        
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setMethod('POST');
        request.setEndpoint('https://login.salesforce.com/services/oauth2/token');
        request.setHeader('Content-Type','application/x-www-form-urlencoded');        
        request.setBody('grant_type=password' + 
                    '&client_id=' + apiUser.Client_ID__c + 
                    '&client_secret=' + apiUser.Client_Secret__c + 
                    '&username=' + apiUser.Username__c + 
                    '&password=' + apiUser.Password__c);
        
        httpResponse response = http.send(request);
        
        if(response.getStatusCode() == 200) {
            Map<String, Object> resultMap = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
            
            String accessToken = (String)resultMap.get('access_token');
            System.debug('Access token is: '+accessToken); // will return SESSION_ID_REMOVED as session is removed by Salesforce for security purposes
            bearer = accessToken;
        }
    }
    
    private static String getLogData(String logId) {
        Http http = new Http();
        HttpRequest request = new HttpRequest();

        request.setMethod('GET');
        request.setHeader('Authorization', 'Bearer '+bearer);
        request.setEndpoint(currentOrgSite+apiString+logId+'/Body');
        
        
        HttpResponse response = http.send(request);
        // If the request is successful, parse the JSON response.
        
        String logBody = '';
        if(response.getStatusCode() == 200) {
            logBody = response.getBody();
        }
        
        
        return logBody.contains(srchStr) ? logBody : null;
    } 
    
    private static List<ApexLog> getLogs() {
        return [SELECT Id FROM ApexLog];
    }
}