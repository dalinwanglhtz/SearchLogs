public class SearchLogs {
    private static String currentOrgSite = URL.getSalesforceBaseUrl().toExternalForm();
    private static String API_PATH = '/services/data/v52.0/sobjects/ApexLog/';
    private static String bearer;
    
    @AuraEnabled
    public static String searchLogs(String searchStr) {
        // 1. Create connected app
        // 2. Remote site setting for endpoint registration
        Api_User__c registeredApiUser = getApiUser(UserInfo.getUserName());
        if(registeredApiUser == null) return null;
        bearer = getAccessToken(registeredApiUser);
        String allLogString = '';
        List<ApexLog> allLogs = getLogs();
        for (ApexLog al : allLogs) {
            String someData = getLogData(al.Id);
            if(someData.containsIgnoreCase(searchStr) && !someData.contains('selfsearch')) {
            	allLogString += someData;    
            }
        }
        // This will prevent searching for logs generated by the search
        System.debug('selfsearch');
        return allLogString;
    }
    
    @AuraEnabled
    public static void apiUserRegister(Api_User__c apiUser) {
        if(getAccessToken(apiUser) != null) {
            insert apiUser;
        } else {
            throw new AuraHandledException('API User cannot be registered! Make sure user details and credentials are entered correctly.');
        }
    }
    
    @AuraEnabled
    public static Boolean hasApiUser() {
        return getApiUser(UserInfo.getUserName()) != null;
    }
    
    @AuraEnabled
    public static String getUserName() {
        return UserInfo.getUserName();
    }
    
    private static Api_User__c getApiUser(String userName) {
        Api_User__c apiUser;
        try {
        	apiUser = [SELECT Id, Username__c, Password__c, Client_ID__c, Client_Secret__c
                       FROM Api_User__c 
                       WHERE Username__c = :userName LIMIT 1];
            return apiUser;
        } catch(Exception ex) {
            throw new ApplicationException('No Api User found with username: '+userName);
        }
    }
    
    private static String getAccessToken(Api_User__c apiUser) {
        // 1. Create connected app
        // 2. Remote site setting for endpoint registration
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setMethod('POST');
        request.setEndpoint('https://login.salesforce.com/services/oauth2/token');
        request.setHeader('Content-Type','application/x-www-form-urlencoded');        
        request.setBody('grant_type=password' + 
                    '&client_id=' + apiUser.Client_ID__c + 
                    '&client_secret=' + apiUser.Client_Secret__c + 
                    '&username=' + apiUser.Username__c + 
                    '&password=' + apiUser.Password__c);
        
        httpResponse response = http.send(request);
        
        String accessToken;
        if(response.getStatusCode() == 200) {
            Map<String, Object> resultMap = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
            
            accessToken = (String)resultMap.get('access_token');
            System.debug('Access token is: '+accessToken); // will return SESSION_ID_REMOVED as session is removed by Salesforce for security purposes
        }
        
        return accessToken;
    }
    
    private static String getLogData(String logId) {
        Http http = new Http();
        HttpRequest request = new HttpRequest();

        request.setMethod('GET');
        request.setHeader('Authorization', 'Bearer '+bearer);
        request.setEndpoint(currentOrgSite+API_PATH+logId+'/Body');
        
        HttpResponse response = http.send(request);
        // If the request is successful, parse the JSON response.
        
        String logBody = '';
        if(response.getStatusCode() == 200) {
            logBody = response.getBody();
        }
        
        return logBody;
    } 
    
    private static List<ApexLog> getLogs() {
        return [SELECT Id FROM ApexLog];
    }
    
    public class ApplicationException extends Exception {}
}